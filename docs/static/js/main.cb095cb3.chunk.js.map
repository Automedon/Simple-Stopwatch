{"version":3,"sources":["actions/types.js","actions/stopwatchActions.js","App.js","serviceWorker.js","reducer/stopwatchReducer.js","reducer/index.js","store.js","index.js"],"names":["INCREASE_INTERVAL","DECREASE_INTERVAL","START_STOPWATCH","STOP_STOPWATCH","TICK","timer","tick","interval","type","payload","App","_this","this","_this$props$stopWatch","props","stopWatch","ticking","seconds","react_default","a","createElement","className","concat","disabled","onClick","increaseInterval","decreaseInterval","startStopwatch","stopStopwatch","React","Component","connect","state","dispatch","clearInterval","setInterval","Boolean","window","location","hostname","match","initState","combineReducers","arguments","length","undefined","action","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb095cb3.chunk.js","sourcesContent":["export const INCREASE_INTERVAL='INCREASE_INTERVAL';\r\nexport const DECREASE_INTERVAL='DECREASE_INTERVAL';\r\nexport const START_STOPWATCH='START_STOPWATCH';\r\nexport const STOP_STOPWATCH='STOP_STOPWATCH';\r\nexport const TICK='TICK';","import {DECREASE_INTERVAL, INCREASE_INTERVAL, START_STOPWATCH, STOP_STOPWATCH, TICK} from\r\n        \"./types.js\";\r\n\r\n\r\n\r\nexport const increaseInterval = () => (dispatch) => {\r\n    dispatch({\r\n        type: INCREASE_INTERVAL,\r\n        payload: 1000\r\n    })\r\n\r\n};\r\nexport const decreaseInterval = () => (dispatch) => {\r\n    dispatch({\r\n        type: DECREASE_INTERVAL,\r\n        payload: 1000\r\n    })\r\n};\r\nlet timer = null;\r\nexport const startStopwatch = (interval) => (dispatch) => {\r\n\r\n    clearInterval(timer);\r\n    timer = setInterval(() => dispatch(tick(interval)), interval);\r\n    dispatch({type: START_STOPWATCH});\r\n\r\n};\r\nconst tick = (interval) => {\r\n    return {type: TICK,payload:interval}\r\n};\r\nexport const stopStopwatch = () => {\r\n    clearInterval(timer);\r\n    return {type: STOP_STOPWATCH};\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport {\n  decreaseInterval,\n  increaseInterval,\n  startStopwatch,\n  stopStopwatch\n} from \"./actions/stopwatchActions.js\";\n\nclass App extends React.Component {\n  render() {\n    const { ticking, interval, seconds } = this.props.stopWatch;\n    return (\n      <div className=\"App\">\n        <div>\n          {`Refresh interval  ${interval / 1000} sec      `}\n          <button\n            disabled={ticking}\n            onClick={() => this.props.increaseInterval()}\n          >\n            increase\n          </button>\n          <button\n            disabled={ticking}\n            onClick={() => this.props.decreaseInterval()}\n          >\n            decrease\n          </button>\n        </div>\n\n        <div>\n          {`Stopwatch:  ${seconds} sec     `}\n          <button onClick={() => this.props.startStopwatch(interval)}>\n            Start\n          </button>\n          <button onClick={() => this.props.stopStopwatch()}>Stop</button>\n        </div>\n        {ticking && interval === 0 && (\n          <div>Ok, it's working, but u sure that interval should be zero?</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    stopWatch: state.stopWatch\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { increaseInterval, decreaseInterval, startStopwatch, stopStopwatch }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  DECREASE_INTERVAL,\r\n  INCREASE_INTERVAL,\r\n  START_STOPWATCH,\r\n  STOP_STOPWATCH,\r\n  TICK\r\n} from \"../actions/types.js\";\r\n\r\nconst initState = {\r\n  interval: 0,\r\n  seconds: 0,\r\n  ticking: false\r\n};\r\n\r\nexport default function stopwatchReducer(state = initState, action) {\r\n  switch (action.type) {\r\n    case INCREASE_INTERVAL:\r\n      return { ...state, interval: (state.interval += action.payload) };\r\n    case DECREASE_INTERVAL:\r\n      if (state.interval < 1) {\r\n        return { ...state, interval: 0 };\r\n      }\r\n      return { ...state, interval: (state.interval -= action.payload) };\r\n    case START_STOPWATCH:\r\n      return { ...state, ticking: true };\r\n    case STOP_STOPWATCH:\r\n      return { ...state, seconds: 0, ticking: false };\r\n    case TICK:\r\n      if (state.interval === 0) {\r\n        return { ...state, seconds: (state.seconds += 1) };\r\n      }\r\n      return { ...state, seconds: (state.seconds += action.payload / 1000) };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport stopWatch from \"./stopwatchReducer.js\";\r\n\r\nexport default combineReducers({\r\n  stopWatch\r\n});\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducer';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState,\r\n    compose(applyMiddleware(...middleware)\r\n    ));\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store.js\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}